{"version":3,"sources":["Editor.tsx","lib/viewingTransformer.ts","Drop.tsx","serviceWorker.ts","index.tsx"],"names":["viewingTransformer","ViewingTransformer","svg","vtm","this","document","createElementNS","createSVGMatrix","xFactor","yFactor","origin","translate","x","y","scale","multiply","reducer","state","action","matrix","dragging","startPosition","position","type","position2","dx","dy","newMatrix","payload","i","delta","Error","distance","pt1","pt2","Math","hypot","Editor","img","useDocumentTitle","file","name","svgRef","useRef","groupRef","useReducer","points","viewport","width","height","dispatch","useEffect","mouseUp","window","addEventListener","removeEventListener","id","overflow","ref","version","xmlns","xmlnsXlink","viewBox","join","onMouseDown","onWheel","e","current","group","pt","createSVGPoint","clientX","clientY","gPt","getScreenCTM","matrixTransform","inverse","deltaY","baseVal","value","mat","a","b","c","d","f","onMouseMove","event","transform","xlinkHref","data","length","cx","cy","r","fill","x1","y1","x2","y2","stroke","strokeWidth","style","toFixed","JSON","stringify","Drop","React","useState","setImg","dropped","setDropped","onDrop","useCallback","acceptedFiles","find","Boolean","Image","reader","FileReader","readAsDataURL","onload","src","result","useDropzone","getRootProps","getInputProps","isDragActive","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.42bf2026.chunk.js","sourcesContent":["import useDocumentTitle from \"@rehooks/document-title\";\nimport React, { useEffect, useReducer, useRef } from \"react\";\nimport { Image } from \"./Drop\";\nimport ViewingTransformer from \"./lib/viewingTransformer\";\n\ninterface State {\n  scaleFactor?: number;\n  points: Point[];\n  matrix: number[];\n  dragging: boolean;\n  viewport: {\n    width: number;\n    height: number;\n  };\n  position: Point;\n  startPosition: Point;\n  svgRef: React.RefObject<SVGSVGElement>;\n  groupRef: React.RefObject<SVGGElement>;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nconst reducer = (state: State, action: any) => {\n  const { matrix, dragging, startPosition, position } = state;\n\n  switch (action.type) {\n    case \"move\":\n      const position2 = { x: action.x, y: action.y };\n      if (dragging) {\n        const dx = position2.x - startPosition.x;\n        const dy = position2.y - startPosition.y;\n\n        const newMatrix = [...matrix];\n        newMatrix[4] += dx;\n        newMatrix[5] += dy;\n\n        return {\n          ...state,\n          position: position2,\n          matrix: newMatrix,\n        };\n      } else {\n        return {\n          ...state,\n          position: position2,\n        };\n      }\n\n    case \"down\":\n      return {\n        ...state,\n        startPosition: position,\n        dragging: true,\n      };\n\n    case \"up\":\n      return {\n        ...state,\n        dragging: false,\n      };\n\n    case \"matrix\":\n      return {\n        ...state,\n        matrix: action.payload,\n      };\n\n    case \"zoom\":\n      const newMatrix = [...matrix];\n\n      for (let i = 0; i < 4; i++) {\n        newMatrix[i] = newMatrix[i] * action.delta;\n      }\n\n      // const [hCenter, vCenter] = [viewport.width / 2, viewport.height / 2];\n\n      newMatrix[4] = (1 - action.delta) * position.x;\n      newMatrix[5] = (1 - action.delta) * position.y;\n\n      return {\n        ...state,\n        matrix: newMatrix,\n      };\n\n    default:\n      throw new Error(`${action.type} not supported`);\n  }\n};\n\nconst distance = (pt1: Point, pt2: Point): number =>\n  Math.hypot(pt2.x - pt1.x, pt2.y - pt1.y);\n\nlet viewingTransformer: ViewingTransformer;\n\nconst Editor: React.FC<{ img: Image }> = ({ img }) => {\n  useDocumentTitle(`üìè <${img.file.name}>`);\n\n  const svgRef = useRef<SVGSVGElement>(null);\n  const groupRef = useRef<SVGGElement>(null);\n\n  const [{ points, matrix, position, dragging }, dispatch] = useReducer(\n    reducer,\n    {\n      points: [],\n      matrix: [1, 0, 0, 1, 0, 0],\n      dragging: false,\n      viewport: {\n        width: 800,\n        height: 600,\n      },\n      position: {\n        x: 0,\n        y: 0,\n      },\n      startPosition: {\n        x: 0,\n        y: 0,\n      },\n      svgRef,\n      groupRef,\n    }\n  );\n\n  useEffect(() => {\n    const mouseUp = () => dispatch({ type: \"up\" });\n\n    window.addEventListener(\"blur\", mouseUp);\n    window.addEventListener(\"mouseup\", mouseUp);\n    window.addEventListener(\"pointerup\", mouseUp);\n    return () => {\n      window.removeEventListener(\"blur\", mouseUp);\n      window.removeEventListener(\"mouseup\", mouseUp);\n      window.removeEventListener(\"pointerup\", mouseUp);\n    };\n  });\n\n  return (\n    <div id=\"editor\">\n      <svg\n        overflow=\"always\"\n        ref={svgRef}\n        id=\"svg\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        viewBox={[0, 0, img.width, img.height].join(\" \")}\n        // onClick={() =>\n        //   dispatch({\n        //     type: \"click\",\n        //   })\n        // }\n        onMouseDown={() => dispatch({ type: \"down\" })}\n        onWheel={(e) => {\n          const svg = svgRef.current;\n          const group = groupRef.current;\n          if (svg && group) {\n            const pt = svg.createSVGPoint();\n            pt.x = e.clientX;\n            pt.y = e.clientY;\n\n            const gPt = group.getScreenCTM();\n\n            if (gPt !== null) {\n              const { x, y } = pt.matrixTransform(gPt.inverse());\n\n              dispatch({\n                type: \"move\",\n                x,\n                y,\n              });\n\n              viewingTransformer =\n                viewingTransformer || new ViewingTransformer(svg);\n\n              const dir = e.deltaY < 0 ? 1 : -1;\n              const xFactor = 1 + 0.1 * dir;\n              const yFactor =\n                (xFactor * svg.height.baseVal.value) / svg.width.baseVal.value;\n\n              const mat = viewingTransformer.scale(xFactor, yFactor, { x, y });\n\n              dispatch({\n                type: \"matrix\",\n                payload: [mat.a, mat.b, mat.c, mat.d, mat.e, mat.f],\n              });\n            }\n\n            // group.transform.baseVal.getItem(0).setMatrix(mat);\n          }\n        }}\n        onMouseMove={(event: React.MouseEvent) => {\n          const svg = svgRef.current;\n          const group = groupRef.current;\n          if (svg && group) {\n            const pt = svg.createSVGPoint();\n            pt.x = event.clientX;\n            pt.y = event.clientY;\n\n            const gPt = group.getScreenCTM();\n\n            if (gPt !== null) {\n              const { x, y } = pt.matrixTransform(gPt.inverse());\n\n              dispatch({\n                type: \"move\",\n                x,\n                y,\n              });\n            }\n          }\n        }}\n      >\n        <g transform={`matrix(${matrix.join(\" \")})`} ref={groupRef}>\n          <image width={img.width} height={img.height} xlinkHref={img.data} />\n          <g>\n            {points.length > 0 && (\n              <>\n                <circle cx={points[0].x} cy={points[0].y} r={5} fill=\"white\" />\n                <circle\n                  cx={points[0].x}\n                  cy={points[0].y}\n                  r={3}\n                  fill=\"hotpink\"\n                />\n              </>\n            )}\n            {points.length === 2 && (\n              <>\n                <circle cx={points[1].x} cy={points[1].y} r={5} fill=\"white\" />\n                <circle\n                  cx={points[1].x}\n                  cy={points[1].y}\n                  r={3}\n                  fill=\"hotpink\"\n                />\n\n                <line\n                  x1={points[0].x}\n                  y1={points[0].y}\n                  x2={points[1].x}\n                  y2={points[1].y}\n                  stroke=\"white\"\n                  strokeWidth={5}\n                />\n\n                <line\n                  x1={points[0].x}\n                  y1={points[0].y}\n                  x2={points[1].x}\n                  y2={points[1].y}\n                  strokeWidth={2}\n                  stroke=\"hotpink\"\n                />\n\n                <text\n                  x={points[1].x}\n                  y={points[1].y - 20}\n                  style={{ stroke: \"white\", strokeWidth: 6 }}\n                >\n                  {distance(points[0], points[1]).toFixed(2)}\n                </text>\n                <text\n                  x={points[1].x}\n                  y={points[1].y - 20}\n                  style={{ fill: \"black\" }}\n                >\n                  {distance(points[0], points[1]).toFixed(2)}\n                </text>\n              </>\n            )}\n          </g>\n        </g>\n      </svg>\n      <div id=\"info\">{JSON.stringify({ dragging, position })}</div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import { Point } from \"../Editor\";\n\nclass ViewingTransformer {\n  private vtm: SVGMatrix;\n\n  /**\n   * Initialize the transformer.\n   * @param {Element} svg - An svg element from which matrices can be created.\n   */\n  constructor(private svg: SVGSVGElement) {\n    this.svg =\n      svg || document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\n    // This is the viewing transformation matrix, which starts at identity.\n    this.vtm = this.createSVGMatrix();\n  }\n\n  /**\n   * Helper method to create a new SVGMatrix instance.\n   */\n  createSVGMatrix() {\n    return this.svg.createSVGMatrix();\n  }\n\n  /**\n   * Scale the vtm.\n   * @param {Number} xFactor - The amount to scale in the x direction.\n   * @param {Number} yFactor - The amount to scale in the y direction.\n   * @param {Point} origin - The origin point at which the scale should be centered.\n   */\n  scale(xFactor: number, yFactor: number, origin: Point) {\n    // Order is important -- read this from the bottom to the top.\n    // 1) Post multiply onto the current matrix.\n    // 2) Translate such that the origin is at (0, 0).\n    // 3) Scale by the provided factors at the origin.\n    // 4) Put the origin back where it was.\n    this.vtm = this.createSVGMatrix()\n      .translate(origin.x, origin.y)\n      .scale(xFactor, yFactor)\n      .translate(-origin.x, -origin.y)\n      .multiply(this.vtm);\n\n    return this.vtm;\n  }\n}\n\nexport default ViewingTransformer;\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Editor from \"./Editor\";\n\nexport interface Image {\n  file: any;\n  width: number;\n  height: number;\n  data: any;\n}\n\nfunction Drop() {\n  const [img, setImg] = React.useState<Image>();\n  const [dropped, setDropped] = React.useState<boolean>(false);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setDropped(true);\n    const file = acceptedFiles.find(Boolean);\n    const i = new Image();\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      i.src = reader.result as string;\n      i.onload = () => {\n        setImg({\n          file,\n          width: i.width,\n          height: i.height,\n          data: reader.result,\n        });\n      };\n    };\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  if (img) {\n    return <Editor img={img} />;\n  } else {\n    return (\n      <div id=\"dropzone\" {...getRootProps()}>\n        {dropped ? (\n          <span>Reading image data...</span>\n        ) : (\n          <>\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <span>Nice. I can read that. Now drop it on here...</span>\n            ) : (\n              <span>Drag an image here, or click to browse for it</span>\n            )}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Drop;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Drop from \"./Drop\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Drop />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}